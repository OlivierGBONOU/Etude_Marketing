import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import networkx as nx
from sklearn.tree import DecisionTreeClassifier, export_graphviz
import pydotplus
import os
from io import StringIO
import openpyxl

# Configuration de la page
st.set_page_config(
    page_title="Services de m√©nage pour √©tudiants ENSEA",
    page_icon="üßπ",
    layout="wide"
)

# Titre principal
st.title("Rapport du projet marketing : Services de m√©nage pour √©tudiants ENSEA")
st.markdown("*√âtude sur la pertinence de proposer des services de m√©nage aux √©tudiants de l'ENSEA*")

# Chargement des donn√©es (√† remplacer par votre chargement r√©el)
@st.cache_data
def load_data():
    script_dir = os.path.split(__file__)[0]
    
    # Construire le chemin complet vers le fichier Excel
    file_path = os.path.join(script_dir, "base_finale.xlsx")
    
    # Chargement du fichier
    df = pd.read_excel(file_path, engine="openpyxl")
    
    # Suppression de la colonne inutile
    if "Nationalite.1" in df.columns:
        df = df.drop(columns="Nationalite.1")

    # Remplacement des valeurs textuelles
    df["annee_etudes"] = df["annee_etudes"].replace({
        "1√®re ann√©e": "1A",
        "2√®me ann√©e": "2A",
        "3√®me ann√©e": "3A"
    })

    df["sexe"] = df["sexe"].replace({
        "Homme": "H",
        "Femme": "F"
    })

    df['temps_menage_hebdo'] = df['temps_menage_hebdo'].replace({
        "Moins de 30 minutes": "<30min",
        "Entre 30 minutes et 1 heure": "30min-1h",
        "Entre 1 et 2 heures": "1-2h",
        "Plus de 2 heures": ">2h"
    })

    df['budget_mensuel'] = df['budget_mensuel'].replace({
        "Moins de 5000": "<5000",
        "Entre 5000 et 10000": "5000-10000",
        "Entre 15000 et 20000": "15000-20000"
    })

    # Mapping pour conversion num√©rique
    temps_map = {'<30min': 0.5, '30min-1h': 1.5, '1-2h': 2.5, '>2h': 3.5}
    budget_map = {'<5000': 3000, '5000-10000': 7500, '15000-20000': 17500}

    # V√©rifier si les colonnes existent avant la conversion
    if 'temps_menage_hebdo' in df.columns:
        df['temps_menage_hebdo_num'] = df['temps_menage_hebdo'].map(temps_map)

    if 'budget_mensuel' in df.columns:
        df['budget_mensuel_num'] = df['budget_mensuel'].map(budget_map)

    return df

# Ex√©cuter la fonction et stocker les donn√©es
df = load_data()

# Fonction pour convertir les colonnes binaires en format exploitable pour les visualisations
def prepare_binary_columns(df, prefix):
    binary_cols = [col for col in df.columns if col.startswith(prefix)]
    tasks = [col.replace(prefix, '') for col in binary_cols]
    
    # Cr√©er un DataFrame pour les visualisations
    result_df = pd.DataFrame()
    for i, col in enumerate(binary_cols):
        result_df[tasks[i]] = df[col]
    
    return result_df, tasks

ordre_modalites = [
    'Pas du tout int√©ress√©(e)', 
    'Plut√¥t pas int√©ress√©(e)', 
    'Ind√©cis(e)', 
    'Plut√¥t int√©ress√©(e)', 
    'Tr√®s int√©ress√©(e)'
]

# ----------------------- SECTION 1: ANALYSE DU MARCH√â ET DE LA DEMANDE -----------------------
st.header("1. Analyse du march√© et de la demande")

# R√©partition par ann√©e d'√©tudes, type de logement et nombre d'occupants
st.subheader("R√©partition d√©mographique")

col1, col2 = st.columns([3, 1])

with col1:
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["Par sexe", "Par ann√©e d'√©tudes", "Par type de logement", "Par nombre d'occupants", "Par nationalit√©"])
    
    with tab1:
        # Calculer les valeurs et r√©initialiser l'index
        sexe_counts = df['sexe'].value_counts().reset_index()
        sexe_counts.columns = ['sexe', 'count']
        
        fig = px.pie(sexe_counts, 
                    names='sexe', 
                    values='count', 
                    labels={'sexe': "Sexe", 'count': "Nombre d'√©tudiants"},
                    title="R√©partition par sexe",
                    hole=0.4)  # Ajout du trou central pour cr√©er un donut
        
        st.plotly_chart(fig, use_container_width=True)
        
    with tab2:
        # Calculer les valeurs et r√©initialiser l'index
        annee_counts = df['annee_etudes'].value_counts().reset_index()
        
        fig = px.bar(annee_counts, 
                     x='annee_etudes', 
                     y='count', 
                     labels={'annee_etudes': "Ann√©e d'√©tudes", 'count': "Nombre d'√©tudiants"},
                     color='annee_etudes')
        fig.update_layout(title="R√©partition par ann√©e d'√©tudes")
        st.plotly_chart(fig, use_container_width=True)
    
    with tab3:
        # Calculer les valeurs et r√©initialiser l'index
        type_logement_counts = df['type_logement'].value_counts().reset_index()
        
        fig = px.bar(type_logement_counts, 
                     x='type_logement', 
                     y='count', 
                     labels={'type_logement': "Type de logement", 'count': "Nombre d'√©tudiants"},
                     color='type_logement')
        fig.update_layout(title="R√©partition par type de logement")
        st.plotly_chart(fig, use_container_width=True)
    
    with tab4:
        # Calculer les valeurs et r√©initialiser l'index
        nb_occupants_counts = df['nb_occupants'].value_counts().reset_index()
        
        fig = px.bar(nb_occupants_counts, 
                     x='nb_occupants', 
                     y='count', 
                     labels={'nb_occupants': "Nombre d'occupants", 'count': "Nombre d'√©tudiants"},
                     color='nb_occupants')
        fig.update_layout(title="R√©partition par nombre d'occupants")
        st.plotly_chart(fig, use_container_width=True)
    
    with tab5:
        # Calculer les valeurs et r√©initialiser l'index
        nb_occupants_counts = df['Nationalite'].value_counts().reset_index()
        
        fig = px.bar(nb_occupants_counts, 
                     x='Nationalite', 
                     y='count', 
                     labels={'Nationalite': "Nationalit√©", 'count': "Nombre d'√©tudiants"},
                     color='Nationalite')
        fig.update_layout(title="R√©partition par nombre d'occupants")
        st.plotly_chart(fig, use_container_width=True)

with col2:
    st.markdown("""
    **D√©mographie cible**
    
    La r√©partition d√©mographique montre les segments les plus importants, permettant d'identifier les groupes prioritaires pour le d√©veloppement du service de m√©nage.
    """)

# √âvaluation de l'int√©r√™t global pour le service
st.subheader("√âvaluation de l'int√©r√™t pour le service")

col1, col2 = st.columns([3, 1])

with col1:
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["Int√©r√™t global", "Par sexe", "Par type de logement", "Par ann√©e d'√©tudes", "Par nationalit√©"])
    
    with tab1:
        # Graphique circulaire pour "interet_service"
        fig = px.pie(df, names='interet_service', 
                     title="Int√©r√™t global pour le service de m√©nage",
                     color='interet_service', 
                     category_orders={'interet_service': ordre_modalites},
                     color_discrete_map={'Pas du tout int√©ress√©(e)': 'darkred',  'Plut√¥t pas int√©ress√©(e)': 'orangered', 'Ind√©cis(e)': 'gold', 'Plut√¥t int√©ress√©(e)': 'lightgreen', 'Tr√®s int√©ress√©(e)': 'green'})
        st.plotly_chart(fig, use_container_width=True)
        
    with tab2:
        # Graphique √† mosa√Øque croisant "sexe" et "interet_service" avec effectifs bruts
        # Cr√©ation de la table de contingence
        crosstab_counts = pd.crosstab(df['sexe'], df['interet_service'])
        crosstab_long_counts = crosstab_counts.reset_index().melt(id_vars='sexe', value_name='effectif')
        
        fig = px.bar(crosstab_long_counts, x='sexe', y='effectif', color='interet_service',
                    labels={'sexe': 'Sexe', 'effectif': "Nombre d'√©tudiants"},
                    title="Int√©r√™t pour le service selon le sexe (effectifs bruts)",
                    category_orders={'interet_service': ordre_modalites},
                    color_discrete_map={'Pas du tout int√©ress√©(e)': 'darkred',  'Plut√¥t pas int√©ress√©(e)': 'orangered', 'Ind√©cis(e)': 'gold', 'Plut√¥t int√©ress√©(e)': 'lightgreen', 'Tr√®s int√©ress√©(e)': 'green'})
        fig.update_layout(barmode='stack')
        st.plotly_chart(fig, use_container_width=True)
    
    with tab3:
        # Graphique √† mosa√Øque croisant "type_logement" et "interet_service" avec effectifs bruts
        # Cr√©ation de la table de contingence
        crosstab_counts = pd.crosstab(df['type_logement'], df['interet_service'])
        crosstab_long_counts = crosstab_counts.reset_index().melt(id_vars='type_logement', value_name='effectif')
        
        fig = px.bar(crosstab_long_counts, x='type_logement', y='effectif', color='interet_service',
                    labels={'type_logement': 'Type de logement', 'effectif': "Nombre d'√©tudiants"},
                    title="Int√©r√™t pour le service selon le type de logement (effectifs bruts)",
                    category_orders={'interet_service': ordre_modalites},
                    color_discrete_map={'Pas du tout int√©ress√©(e)': 'darkred',  'Plut√¥t pas int√©ress√©(e)': 'orangered', 'Ind√©cis(e)': 'gold', 'Plut√¥t int√©ress√©(e)': 'lightgreen', 'Tr√®s int√©ress√©(e)': 'green'})
        fig.update_layout(barmode='stack')
        st.plotly_chart(fig, use_container_width=True)
        
    with tab4:
        # Graphique √† mosa√Øque croisant "annee_etudes" et "interet_service" avec effectifs bruts
        # Cr√©ation de la table de contingence
        crosstab_counts = pd.crosstab(df['annee_etudes'], df['interet_service'])
        crosstab_long_counts = crosstab_counts.reset_index().melt(id_vars='annee_etudes', value_name='effectif')
        
        fig = px.bar(crosstab_long_counts, x='annee_etudes', y='effectif', color='interet_service',
                    labels={'annee_etudes': "Ann√©e d'√©tudes", 'effectif': "Nombre d'√©tudiants"},
                    title="Int√©r√™t pour le service selon l'ann√©e d'√©tudes (effectifs bruts)",
                    category_orders={'interet_service': ordre_modalites},
                    color_discrete_map={'Pas du tout int√©ress√©(e)': 'darkred',  'Plut√¥t pas int√©ress√©(e)': 'orangered', 'Ind√©cis(e)': 'gold', 'Plut√¥t int√©ress√©(e)': 'lightgreen', 'Tr√®s int√©ress√©(e)': 'green'})
        fig.update_layout(barmode='stack')
        st.plotly_chart(fig, use_container_width=True)
        
    with tab5:
        # Graphique √† mosa√Øque croisant "Nationalite" et "interet_service"
        # Cr√©ons une table de contingence
        crosstab = pd.crosstab(df['Nationalite'], df['interet_service'], normalize='index')
        crosstab_long = crosstab.reset_index().melt(id_vars='Nationalite', value_name='proportion')
        
        fig = px.bar(crosstab_long, x='Nationalite', y='proportion', color='interet_service',
                     labels={'Nationalite': 'Nationalit√©', 'proportion': 'Proportion'},
                     title="Int√©r√™t pour le service selon la nationalit√©",
                     category_orders={'interet_service': ordre_modalites},
                     color_discrete_map={'Pas du tout int√©ress√©(e)': 'darkred',  'Plut√¥t pas int√©ress√©(e)': 'orangered', 'Ind√©cis(e)': 'gold', 'Plut√¥t int√©ress√©(e)': 'lightgreen', 'Tr√®s int√©ress√©(e)': 'green'})
        fig.update_layout(barmode='stack')
        st.plotly_chart(fig, use_container_width=True)

with col2:
    st.markdown("""
    **Analyse de l'int√©r√™t**
    
    L'int√©r√™t pour le service varie significativement selon le type de logement et l'ann√©e d'√©tudes. Cette analyse permet d'identifier les segments les plus r√©ceptifs et de cibler les efforts marketing en cons√©quence.
    """)

# Analyse des freins et motivations
st.subheader("Analyse des freins et motivations")

col1, col2 = st.columns([3, 1])

with col1:
    # Diagramme en barres horizontales pour "raison_non_interet"
    raison_non_df = df[df['interet_service'] == 'Pas du tout int√©ress√©(e)']['raison_non_interet'].value_counts().reset_index()
    fig = px.bar(raison_non_df, y='raison_non_interet', x='count', 
                 title="Raisons du d√©sint√©r√™t pour le service",
                 labels={'raison_non_interet': 'Raison', 'count': 'Nombre d\'√©tudiants'},
                 orientation='h')
    fig.update_layout(yaxis={'categoryorder':'total ascending'})
    st.plotly_chart(fig, use_container_width=True)
    
    seuil_pourcentage=4
    
    # Pr√©paration des donn√©es
    periode_count = df.groupby(['periode_difficile', 'principaux_frein']).size().reset_index(name='count')
    frein_interet = df.groupby(['principaux_frein', 'interet_service']).size().reset_index(name='count')
    
    # Filtrer les connexions pour ne garder que celles d√©passant un certain seuil
    total_periode_frein = periode_count['count'].sum()
    total_frein_interet = frein_interet['count'].sum()
    
    # Calculer le seuil absolu bas√© sur le pourcentage
    seuil_periode_frein = (seuil_pourcentage / 100) * total_periode_frein
    seuil_frein_interet = (seuil_pourcentage / 100) * total_frein_interet
    
    # Filtrer les connexions significatives
    periode_count_filtered = periode_count[periode_count['count'] >= seuil_periode_frein]
    frein_interet_filtered = frein_interet[frein_interet['count'] >= seuil_frein_interet]
    
    # Cr√©ation de la liste des n≈ìuds (uniquement ceux qui restent apr√®s filtrage)
    nodes = list(set(periode_count_filtered['periode_difficile'].tolist() + 
                    periode_count_filtered['principaux_frein'].tolist() + 
                    frein_interet_filtered['interet_service'].tolist()))
    
    # Cr√©ation d'un mapping pour les indices des n≈ìuds
    node_indices = {node: i for i, node in enumerate(nodes)}
    
    # Cr√©ation des liens
    links_periode_frein = [dict(source=node_indices.get(row['periode_difficile']), 
                               target=node_indices.get(row['principaux_frein']), 
                               value=row['count']) 
                         for _, row in periode_count_filtered.iterrows() 
                         if row['periode_difficile'] in node_indices and row['principaux_frein'] in node_indices]
    
    links_frein_interet = [dict(source=node_indices.get(row['principaux_frein']), 
                               target=node_indices.get(row['interet_service']), 
                               value=row['count']) 
                         for _, row in frein_interet_filtered.iterrows()
                         if row['principaux_frein'] in node_indices and row['interet_service'] in node_indices]
    
    links = links_periode_frein + links_frein_interet
    
    # Cr√©ation du diagramme Sankey
    # Couleur par d√©faut (bleu clair) et couleur au survol (bleu fonc√©)
    default_color = 'rgba(173, 216, 230, 0.8)'  # Bleu clair
    hover_color = 'rgba(0, 0, 139, 0.8)'  # Bleu fonc√©

    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=20,
            line=dict(color="black", width=0.5),
            label=nodes        
        ),
        link=dict(
            source=[link['source'] for link in links],
            target=[link['target'] for link in links],
            value=[link['value'] for link in links],
            color=[default_color] * len(links),
            hoverinfo="all",
            customdata=[hover_color] * len(links)  # Couleur au survol
        )
    )])
    
    fig.update_layout(
        title_text="Parcours simplifi√©: p√©riode difficile ‚Üí freins ‚Üí int√©r√™t pour le service",
        height=600,
        font=dict(size=12)
    )
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.markdown("""
    **Analyse des freins**
    
    L'identification des principaux freins nous permet de comprendre pourquoi certains √©tudiants ne sont pas int√©ress√©s par le service. Le diagramme Sankey illustre comment les p√©riodes difficiles et les freins influencent l'int√©r√™t pour le service.
    """)
    

    # Profil de la population √©tudiante
st.subheader("Profil de la population estudiantine")

# Clustering pour personas
# S√©lection des variables pour le clustering
cluster_vars = ['type_logement', 'nb_occupants', 'temps_menage_hebdo', 'importance_proprete']

# Pr√©paration des donn√©es pour le clustering (encodage one-hot pour variables cat√©gorielles)
cluster_data = pd.get_dummies(df[cluster_vars])
cluster_data = cluster_data.drop("importance_proprete_Tr√®s importante", axis=1)

# Standardisation
scaler = StandardScaler()
cluster_data_scaled = scaler.fit_transform(cluster_data)

# Clustering K-means
kmeans = KMeans(n_clusters=3, random_state=42)
df['cluster'] = kmeans.fit_predict(cluster_data_scaled)

# Visualisation des clusters avec PCA
pca = PCA()  # Pas de limitation du nombre de composantes pour l'√©boulis
pca_full = pca.fit_transform(cluster_data_scaled)

# Garder uniquement les 2 premi√®res composantes pour la visualisation
pca_result = pca_full[:, :2]

# R√©cup√©ration des valeurs propres
explained_variance = pca.explained_variance_
explained_variance_ratio = pca.explained_variance_ratio_

# Cr√©ation des sous-graphiques: un pour l'√©boulis des valeurs propres et un pour le cercle de corr√©lation
fig1, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))

# Graphique 1: Histogramme des valeurs propres
n_components = min(10, len(explained_variance))  # Limiter √† 10 ou moins si moins de variables
x_range = range(1, n_components + 1)

# Cr√©er l'histogramme
ax1.bar(x_range, explained_variance[:n_components], width=0.8, align='center')
ax1.set_title('Histogramme des valeurs propres')
ax1.set_xlabel('Composante principale')
ax1.set_ylabel('Valeur propre')
ax1.grid(True)

# Ajouter le pourcentage de variance expliqu√©e au-dessus des barres
for i, ratio in enumerate(explained_variance_ratio[:n_components]):
    ax1.text(i + 1, explained_variance[i], f'{ratio:.1%}', 
             va='bottom', ha='center', fontsize=8)

# Affichage de la variance cumul√©e
cum_variance_ratio = np.cumsum(explained_variance_ratio[:n_components])
ax1_twin = ax1.twinx()
ax1_twin.plot(x_range, cum_variance_ratio, 'r-', marker='s', linewidth=2)
ax1_twin.set_ylabel('Variance cumul√©e expliqu√©e', color='r')
ax1_twin.tick_params(axis='y', labelcolor='r')
ax1_twin.grid(False)

# Graphique 2: Cercle de corr√©lation
# Utiliser uniquement les 2 premi√®res composantes pour le cercle de corr√©lation
pca_components = pca.components_[:2, :]
feature_names = cluster_data.columns

# Tracer le cercle de corr√©lation
circle = plt.Circle((0, 0), 1, fill=False, color='gray', linestyle='--')
ax2.add_patch(circle)

# D√©finir un seuil de corr√©lation (ne montrer que les variables fortement corr√©l√©es)
correlation_threshold = 0.38

# Tracer les fl√®ches pour chaque variable qui d√©passe le seuil
for i, (x, y) in enumerate(zip(pca_components[0, :], pca_components[1, :])):
    # Calculer la longueur du vecteur (force de la corr√©lation)
    length = np.sqrt(x**2 + y**2)
    
    # N'afficher que les variables qui d√©passent le seuil
    if length > correlation_threshold:
        ax2.arrow(0, 0, x, y, head_width=0.05, head_length=0.05, fc='blue', ec='blue')
        ax2.text(x * 1.1, y * 1.1, feature_names[i], color='black', ha='center', va='center', fontweight='bold')
    # Optionnel : afficher en gris clair les variables sous le seuil
    else:
        ax2.arrow(0, 0, x, y, head_width=0.03, head_length=0.03, fc='lightgray', ec='lightgray', alpha=0.5)
        ax2.text(x * 1.1, y * 1.1, feature_names[i], color='gray', ha='center', va='center', alpha=0.5)

ax2.set_xlim(-1.2, 1.2)
ax2.set_ylim(-1.2, 1.2)
ax2.grid(True)
ax2.set_title('Cercle de corr√©lation')
ax2.set_xlabel('Composante principale 1')
ax2.set_ylabel('Composante principale 2')

# Ajout d'une ligne horizontale et verticale pour aider √† l'interpr√©tation
ax2.axhline(y=0, color='gray', linestyle='-', alpha=0.3)
ax2.axvline(x=0, color='gray', linestyle='-', alpha=0.3)

plt.tight_layout()
st.pyplot(fig1)

# Graphique 3: Segmentation des √©tudiants (maintenant en bas)
fig2, ax3 = plt.subplots(figsize=(9, 5))
scatter = ax3.scatter(pca_result[:, 0], pca_result[:, 1], c=df['cluster'], cmap='viridis')
ax3.set_title('Segmentation des √©tudiants par clustering (3 personas)')
ax3.set_xlabel('Composante principale 1')
ax3.set_ylabel('Composante principale 2')
plt.tight_layout()
st.pyplot(fig2)

# Colonne d'explication
st.markdown("""
**Analyse des personas et de l'ACP**

L'√©boulis des valeurs propres montre l'importance relative de chaque composante principale et aide √† d√©terminer le nombre optimal de dimensions √† conserver.

**Interpr√©tation du cercle de corr√©lation :**

Le cercle de corr√©lation montre comment les variables originales sont li√©es aux deux composantes principales. Les variables en **gras** sont celles qui sont fortement corr√©l√©es (seuil > 0.5) avec les composantes principales et donc les plus influentes dans la formation des clusters. Les variables en gris clair sont moins d√©terminantes.

**Segmentation des √©tudiants :**

Le clustering r√©v√®le 3 profils distincts d'√©tudiants avec des besoins et comportements diff√©rents face au m√©nage. Ces personas peuvent guider la personnalisation des offres de services.
""")
# ----------------------- SECTION 2: ANALYSE DES BESOINS SP√âCIFIQUES -----------------------
st.header("2. Analyse des besoins sp√©cifiques")

# Charge de m√©nage actuelle
st.subheader("Charge de m√©nage actuelle")

col1, col2 = st.columns([3, 1])

with col1:
    # Bo√Ætes √† moustaches comparant "temps_menage_hebdo" selon le type de logement
    contingency_table = pd.crosstab(df['temps_menage_hebdo_num'], df['type_logement'])

    # Cr√©ation du heatmap
    fig = px.imshow(contingency_table,
                labels=dict(x="Type de logement", y="Temps hebdomadaire", color="Fr√©quence"),
                title="Temps consacr√© au m√©nage selon le type de logement",
                color_continuous_scale="Blues",
                y=contingency_table.index)
    st.plotly_chart(fig, use_container_width=True)
    
    # Scatter plot croisant "difficulte_etudes_menage" et "temps_menage_hebdo"
    difficulte_map = {'Non, jamais': 0, 'Rarement': 1, 'Oui, parfois': 2, "Oui, tr√®s souvent": 3}
    df['difficulte_num'] = df['difficulte_etudes_menage'].map(difficulte_map)
    
    fig = px.scatter(df, x='temps_menage_hebdo_num', y='difficulte_num', 
                     color='type_logement',
                     size='temps_menage_hebdo_num',
                     labels={'temps_menage_hebdo_num': 'Temps hebdomadaire (heures)', 
                             'difficulte_num': 'Difficult√© √† concilier √©tudes et m√©nage'},
                     title="Relation entre temps de m√©nage et difficult√© √† concilier avec les √©tudes",
                     category_orders={'difficulte_num': [0, 1, 2, 3]})
    fig.update_layout(yaxis=dict(tickmode='array', tickvals=[0, 1, 2, 3], ticktext=['Non, jamais', 'Rarement', 'Oui, parfois', 'Oui, tr√®s souvent']))
    st.plotly_chart(fig, use_container_width=True)
    
    # Heat map des corr√©lations
    # S√©lection des variables num√©riques pour la matrice de corr√©lation
    corr_vars = ['temps_menage_hebdo_num', 'difficulte_num', 'tache_contraignante_sols', 
                 'tache_contraignante_sdb', 'tache_contraignante_cuisine', 'tache_contraignante_vaisselle',
                 'tache_contraignante_linge', 'tache_contraignante_rangement']
    
    corr_matrix = df[corr_vars].corr()
    
    fig = px.imshow(corr_matrix, text_auto=True, aspect="auto",
                     title="Corr√©lations entre temps consacr√© au m√©nage et autres variables",
                     color_continuous_scale='RdBu_r')
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.markdown("""
    **Analyse de la charge de m√©nage**
    
    Les √©tudiants consacrent un temps variable au m√©nage selon leur type de logement. On observe une corr√©lation entre le temps consacr√© au m√©nage et la difficult√© √† concilier avec les √©tudes, sugg√©rant un r√©el besoin de services d'aide.
    """)

# T√¢ches probl√©matiques
st.subheader("T√¢ches probl√©matiques")

col1, col2 = st.columns([3, 1])

with col1:
    # Pr√©paration des donn√©es pour le graphique en toile d'araign√©e
    taches_df, taches_list = prepare_binary_columns(df, 'tache_contraignante_')
    taches_df = pd.concat([taches_df, df['type_logement']], axis=1)
    
    # Calcul des moyennes par type de logement
    taches_by_logement = taches_df.groupby('type_logement').mean(numeric_only=True).reset_index()
    
    # Graphique en toile d'araign√©e
    fig = go.Figure()
    
    for logement in taches_by_logement['type_logement'].unique():
        row = taches_by_logement[taches_by_logement['type_logement'] == logement]
        values = row.iloc[0, 1:].tolist()
        # Ajouter la premi√®re valeur √† la fin pour fermer le polygone
        values.append(values[0])
        categories = taches_list + [taches_list[0]]
        
        fig.add_trace(go.Scatterpolar(
            r=values,
            theta=categories,
            fill='toself',
            name=logement
        ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1]
            )
        ),
        title="T√¢ches contraignantes par type de logement",
        showlegend=True
    )
    
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.markdown("""
    **Analyse des t√¢ches probl√©matiques**
    
    Le graphique radar montre clairement quelles t√¢ches sont les plus contraignantes selon le type de logement. Cette analyse permet d'adapter les offres de service aux besoins sp√©cifiques de chaque segment.
    
    L'analyse factorielle r√©v√®le des clusters d'√©tudiants partageant des difficult√©s similaires, permettant une segmentation fine des besoins.
    """)

# P√©riodes critiques
st.subheader("P√©riodes critiques")

col1, col2 = st.columns([3, 1])

with col1:
    # Diagramme en barres des p√©riodes difficiles
    periode_difficile_counts = df['periode_difficile'].value_counts().reset_index()
    
    fig = px.bar(periode_difficile_counts, 
                 x='periode_difficile', 
                 y='count', 
                 labels={'periode_difficile': 'P√©riode', 'count': 'Nombre d\'√©tudiants'},
                 title="P√©riodes difficiles pour g√©rer le m√©nage",
                 color='periode_difficile')
    st.plotly_chart(fig, use_container_width=True)
    
with col2:
    st.markdown("""
    **Analyse des p√©riodes critiques**
    
    Les examens et les p√©riodes de projets sont les moments o√π les √©tudiants ont le plus de difficult√©s √† g√©rer leur m√©nage. La visualisation de la charge acad√©mique tout au long de l'ann√©e permet d'identifier les p√©riodes o√π le service serait le plus valoris√©.
    """)

# ----------------------- SECTION 3: MOD√âLISATION DE L'OFFRE -----------------------
st.header("3. Mod√©lisation de l'offre")

# Tarification et budget
st.subheader("Tarification et budget")

col1, col2 = st.columns([3, 1])

with col1:
    # Histogramme du "budget_mensuel" avec ligne de distribution cumulative
    budget_counts = df['budget_mensuel'].value_counts().reset_index()
    budget_counts = budget_counts.sort_values(by='budget_mensuel', key=lambda x: x.map({'<20‚Ç¨': 1, '20-50‚Ç¨': 2, '50-80‚Ç¨': 3, '>80‚Ç¨': 4}))
    
    fig = make_subplots(specs=[[{"secondary_y": True}]])
    
    # Histogramme
    fig.add_trace(
        go.Bar(x=budget_counts['budget_mensuel'], y=budget_counts['count'], name="Fr√©quence"),
        secondary_y=False,
    )
    
    fig.update_layout(
        title_text="Distribution du budget mensuel",
        xaxis_title="Budget mensuel",
    )
    
    fig.update_yaxes(title_text="Nombre d'√©tudiants", secondary_y=False)
    fig.update_yaxes(title_text="Distribution cumulative", secondary_y=True)
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Diagramme √† barres group√©es comparant le "budget_mensuel" selon diff√©rentes variables
    for var in ['nb_occupants', 'type_logement']:
        crosstab = pd.crosstab(df[var], df['budget_mensuel'])
        fig = px.bar(crosstab, 
                     barmode='group',
                     title=f"Budget mensuel selon {var}")
        st.plotly_chart(fig, use_container_width=True)

with col2:
    st.markdown("""
    **Analyse du budget**
    
    La majorit√© des √©tudiants disposent d'un budget limit√© pour les services de m√©nage. Cette analyse permet d'√©tablir une strat√©gie tarifaire adapt√©e aux diff√©rents segments. On note √©galement que le budget varie selon le type de logement et le nombre d'occupants.
    """)

# Composition des services
st.subheader("Composition des services")

col1, col2 = st.columns([3, 1])

with col1:
    # Diagramme en radar comparant l'int√©r√™t pour diff√©rentes prestations
    prestations_cols = ['prestation_complet', 'prestation_zones', 'prestation_repassage', 
                      'prestation_lessive', 'prestation_rangement']
    prestations_labels = ['M√©nage complet', 'Zones sp√©cifiques', 'Repassage', 'Lessive', 'Rangement']
    
    prestations_means = df[prestations_cols].mean().values.tolist()
    # Ajouter la premi√®re valeur √† la fin pour fermer le polygone
    prestations_means.append(prestations_means[0])
    prestations_labels.append(prestations_labels[0])
    
    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(
        r=prestations_means,
        theta=prestations_labels,
        fill='toself',
        name='Int√©r√™t moyen'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1]
            )
        ),
        title="Int√©r√™t pour les diff√©rentes prestations"
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Analyse du panier moyen
    corr_prestations = df[prestations_cols].corr()
    
    fig = px.imshow(corr_prestations, text_auto=True, aspect="auto",
                     title="Corr√©lations entre les prestations demand√©es",
                     labels=dict(x="Prestation", y="Prestation", color="Corr√©lation"),
                     x=prestations_labels[:-1], y=prestations_labels[:-1],
                     color_continuous_scale='RdBu_r')
    st.plotly_chart(fig, use_container_width=True)
    
    # Matrice BCG adapt√©e
    # Calcul de l'attractivit√© (proportions d'√©tudiants int√©ress√©s)
    attractivite = df[prestations_cols].mean()
    
    # Calcul du potentiel de revenus (simulation)
    # Prix hypoth√©tiques pour chaque service
    prix = {'prestation_complet': 30, 'prestation_zones': 15, 
            'prestation_repassage': 10, 'prestation_lessive': 8, 
            'prestation_rangement': 12}
    
    potentiel_revenus = {col: attractivite[col] * prix[col] for col in prestations_cols}
    potentiel_revenus = pd.Series(potentiel_revenus)
    
    # Cr√©ation du dataframe pour la visualisation
    bcg_df = pd.DataFrame({
        'Attractivit√©': attractivite,
        'Potentiel de revenus': potentiel_revenus,
        'Prestation': prestations_labels[:-1]
    })
    
    fig = px.scatter(bcg_df, x='Attractivit√©', y='Potentiel de revenus', 
                     text='Prestation', size='Potentiel de revenus',
                     title="Matrice BCG adapt√©e des prestations",
                     labels={'Attractivit√©': 'Attractivit√© (proportion d\'int√©ress√©s)', 
                             'Potentiel de revenus': 'Potentiel de revenus'},
                     color='Prestation')
    
    # Ajouter des lignes pour diviser en quadrants
    fig.add_hline(y=potentiel_revenus.median(), line_dash="dash", line_color="gray")
    fig.add_vline(x=attractivite.median(), line_dash="dash", line_color="gray")
    
    # Ajouter des annotations pour les quadrants
    fig.add_annotation(x=0.9, y=0.9, text="√âtoiles", showarrow=False, xref="paper", yref="paper")
    fig.add_annotation(x=0.1, y=0.9, text="Dilemmes", showarrow=False, xref="paper", yref="paper")
    fig.add_annotation(x=0.9, y=0.1, text="Vaches √† lait", showarrow=False, xref="paper", yref="paper")
    fig.add_annotation(x=0.1, y=0.1, text="Poids morts", showarrow=False, xref="paper", yref="paper")
    
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.markdown("""
    **Analyse des prestations**
    
    Le radar montre l'attractivit√© relative des diff√©rentes prestations. La matrice de corr√©lation identifie les services qui sont souvent demand√©s ensemble, permettant de cr√©er des offres group√©es efficaces.
    
    La matrice BCG adapt√©e permet d'identifier les services strat√©giques √† privil√©gier (√©toiles) et ceux qui peuvent servir d'offres d'appel (vaches √† lait).
    """)

# Modalit√©s de service
st.subheader("Modalit√©s de service")

col1, col2 = st.columns([3, 1])

with col1:
    # Diagramme en barres pour "frequence_utilisation" pr√©f√©r√©e
    frequence_counts = df['frequence_utilisation'].value_counts().reset_index()
    
    fig = px.bar(frequence_counts, 
                 x='frequence_utilisation', 
                 y='count', 
                 labels={'frequence_utilisation': 'Fr√©quence', 'count': 'Nombre d\'√©tudiants'},
                 title="Fr√©quence d'utilisation pr√©f√©r√©e",
                 color='frequence_utilisation')
    st.plotly_chart(fig, use_container_width=True)
    
    # Graphique comparatif "interet_abonnement" vs prestations ponctuelles
    fig = px.pie(df, names='interet_abonnement', 
                 title="Int√©r√™t pour une formule d'abonnement",
                 color='interet_abonnement',
                 color_discrete_map={'Plut√¥t pas int√©ress√©(e)':'yellow','Pas du tout int√©ress√©(e)':'red','Tr√®s int√©ress√©(e)':'green', 'Ind√©cis(e)':'gold', 'Plut√¥t int√©ress√©(e)':'crimson'})
    st.plotly_chart(fig, use_container_width=True)
    
    # Diagrammes circulaires pour "presence_menage" et "confiance_cles"
    col_a, col_b = st.columns(2)
    
    with col_a:
        fig = px.pie(df, names='presence_menage', 
                     title="Pr√©f√©rence pour la pr√©sence pendant le m√©nage",
                     hole=0.4)
        st.plotly_chart(fig, use_container_width=True)
    
    with col_b:
        fig = px.pie(df, names='confiance_cles', 
                     title="Disposition √† confier les cl√©s",
                     hole=0.4,
                     color_discrete_map={'Non, je pr√©f√®re √™tre pr√©sent(e)':'red', 'Oui, mais avec des r√©serves':'crimson', 'Je ne sais pas':'green', 'Oui, sans probl√®me':'gold'})
        st.plotly_chart(fig, use_container_width=True)

with col2:
    st.markdown("""
    **Analyse des modalit√©s**
    
    Les √©tudiants montrent des pr√©f√©rences diverses en termes de fr√©quence d'utilisation, avec une tendance vers des services r√©guliers. L'int√©r√™t pour les abonnements est significatif, sugg√©rant un potentiel pour des offres de fid√©lisation.
    
    Les questions de pr√©sence et de confiance des cl√©s sont cruciales pour le mod√®le op√©rationnel du service.
    """)

# ----------------------- SECTION 4: PLANIFICATION OP√âRATIONNELLE -----------------------
st.header("4. Planification op√©rationnelle")

# Disponibilit√©s et pr√©f√©rences horaires
st.subheader("Disponibilit√©s et pr√©f√©rences horaires")

col1, col2 = st.columns([3, 1])

with col1:
    # Heat map des jours pr√©f√©r√©s
    jour_cols = ['jour_lundi', 'jour_mardi', 'jour_mercredi', 
                'jour_jeudi', 'jour_vendredi', 'jour_samedi', 'jour_dimanche']
    jour_labels = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche']
    
    # Agr√©gation par plage horaire et jour
    jour_plage = df.groupby('plage_horaire')[jour_cols].mean()
    
    # Renommer les colonnes
    jour_plage.columns = jour_labels
    
    fig = px.imshow(jour_plage, text_auto=True, aspect="auto",
                     title="Disponibilit√©s selon les jours et plages horaires",
                     labels=dict(x="Jour", y="Plage horaire", color="Proportion"),
                     color_continuous_scale='Viridis')
    st.plotly_chart(fig, use_container_width=True)
    
    # Graphique en quadrants pour les cr√©neaux optimaux
    # Cr√©ation d'un score d'optimalit√© pour chaque jour/plage
    jours_optimaux = jour_plage.unstack().reset_index()
    jours_optimaux.columns = ['jour', 'plage', 'score']
    
    # Score sur l'axe des x: proportion d'√©tudiants disponibles
    # Score sur l'axe des y: facilit√© op√©rationnelle (simul√©e)
    np.random.seed(42)
    jours_optimaux['facilite_operationnelle'] = np.random.uniform(0.3, 0.9, len(jours_optimaux))
    
    fig = px.scatter(jours_optimaux, x='score', y='facilite_operationnelle', 
                     color='jour', symbol='plage', size='score',
                     labels={'score': 'Demande √©tudiante', 'facilite_operationnelle': 'Facilit√© op√©rationnelle'},
                     title="Cr√©neaux optimaux pour les services")
    
    # Ajouter des lignes pour diviser en quadrants
    fig.add_hline(y=jours_optimaux['facilite_operationnelle'].median(), line_dash="dash", line_color="gray")
    fig.add_vline(x=jours_optimaux['score'].median(), line_dash="dash", line_color="gray")
    
    # Ajouter des annotations pour les quadrants
    fig.add_annotation(x=0.9, y=0.9, text="Cr√©neaux optimaux", showarrow=False, xref="paper", yref="paper")
    fig.add_annotation(x=0.1, y=0.9, text="Faciles mais peu demand√©s", showarrow=False, xref="paper", yref="paper")
    fig.add_annotation(x=0.9, y=0.1, text="Demand√©s mais difficiles", showarrow=False, xref="paper", yref="paper")
    fig.add_annotation(x=0.1, y=0.1, text="√Ä √©viter", showarrow=False, xref="paper", yref="paper")
    
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.markdown("""
    **Analyse des disponibilit√©s**
    
    La heat map r√©v√®le les plages horaires les plus demand√©es, permettant d'optimiser la planification des services. Le graphique en quadrants identifie les cr√©neaux qui combinent une forte demande √©tudiante et une facilit√© op√©rationnelle.
    """)

# ----------------------- CONCLUSION -----------------------
st.header("Conclusion")
st.markdown("""
""")

# ----------------------- SIDEBAR FOR FILTERS -----------------------
with st.sidebar:
    st.header("Filtres")
    st.markdown("S√©lectionnez les filtres pour affiner l'analyse")
    
    # Ajout de filtres pour l'analyse
    annee_filter = st.multiselect("Ann√©e d'√©tudes", df['annee_etudes'].unique(), default=df['annee_etudes'].unique())
    logement_filter = st.multiselect("Type de logement", df['type_logement'].unique(), default=df['type_logement'].unique())
    interet_filter = st.multiselect("Int√©r√™t pour le service", df['interet_service'].unique(), default=df['interet_service'].unique())
    
    st.markdown("---")
    st.markdown("**Note:** .")